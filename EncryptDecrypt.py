import argparse
from cryptography.fernet import Fernet

def gen_key():
    """Generate and return a symmetric key using fernet"""
    key = Fernet.generate_key() #returns symmetric key generated by fernet
    print(f"Generated Key: {key.decode()}") #.decode() is used because the key is returned from the fernet function in binary

def decrypt(InputFilePath, key):
    """Decrypts the user selected file"""
    fernetKey = Fernet(key) #creates  fernet instance using supplied key
    with open(InputFilePath, 'rb') as file:
        encrypted_message = file.read()
    decrypted_message = fernetKey.decrypt(encrypted_message).decode() 
    print (f"Message: {decrypted_message}")

def encrypt(OutputFilePath, message, key):
    """Encrypts message and writes it to selected file, creates file if it does not already exist"""
    fernetKey = Fernet(key) #creates  fernet instance using supplied key
    encrypted_message = fernetKey.encrypt(message.encode())#encode is used to swap it to binary to be manipulated with fernet
    with open(OutputFilePath, 'wb') as file:
        file.write(encrypted_message)
        file.close()
    print(f"The encrypted message was written to {OutputFilePath}")

def main():
    #Create main arg parser
    parser = argparse.ArgumentParser(description="Encrypt/decrypt messages using the Fernet function from cryptography module.")
    subparsers = parser.add_subparsers(dest="command", help="Commands")

    #subparser for gen_key command
    subparsers.add_parser("gen_key", help="Generate a new fernet encryption key.")

    #subparser for decrypt command
    decryptParser = subparsers.add_parser("decrypt",help="Decrypt message from file")
    decryptParser.add_argument("InputFilePath", help="File path to file that needs decrypting")
    decryptParser.add_argument("key", help="key used to decrypt file")    

    #subparser for encrypt command
    encryptParser = subparsers.add_parser("encrypt", help="Encrypt message")
    encryptParser.add_argument("OutputFilePath", help="Destination of encrypted file")
    encryptParser.add_argument("message", help="message to be encrypted")
    encryptParser.add_argument("key", help="key used to encrypt file (generate from gen_key function)")

    args = parser.parse_args() #finish setting up arg parser

    #takes the args inputted and performs the tasks
    if args.command == "gen_key":
        gen_key() 
         
    elif args.command == "decrypt":
        message = decrypt(args.InputFilePath, args.key.encode()) #.encode() is used because the key must be in binary

    elif args.command == "encrypt":
        encrypt(args.OutputFilePath, args.message, args.key.encode())

    else:
        parser.print_help()

if __name__ == "__main__":
    main()